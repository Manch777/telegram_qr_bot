import os
from aiohttp import web
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import BotCommand, Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
from config import BOT_TOKEN, WEBHOOK_URL
from database import connect_db, disconnect_db, get_status, update_status, get_status_by_id, update_status_by_id, get_row, get_ticket_type
from handlers import user, admin
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
WEBHOOK_PATH = "/webhook"
FULL_WEBHOOK_URL = (WEBHOOK_URL or "").rstrip("/") + WEBHOOK_PATH

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# /start <payload> ‚Äî deep-link –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º:
#   - "R:<row_id>"
async def deep_link_start_handler(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        return

    payload = (parts[1] or "").strip()
    if not payload:
        await message.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π QR-–∫–æ–¥.")
        return

    # –°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥: —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ ¬´—Ö–≤–æ—Å—Ç¬ª –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    p = payload
    if p.lower().startswith("qr:"):
        p = p[3:].lstrip()
    if p.lower().startswith("r:"):
        p = p[2:].lstrip()
    num_str = p.split(":", 1)[0]

    try:
        candidate = int(num_str)
    except ValueError:
        await message.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π QR-–∫–æ–¥.")
        return

    # 1) –°–¢–ê–†–´–ô QR: —á–∏—Å–ª–æ = user_id (–±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫—É–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    status = await get_status(candidate)
    if status is not None:
        ticket_type = await get_ticket_type(candidate) or "-"
        if status == "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω":
            await update_status(candidate, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await message.answer(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}")
        else:
            await message.answer(f"‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}")
        return

    # 2) –ù–û–í–´–ô QR: —á–∏—Å–ª–æ = row_id (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–∏–Ω –±–∏–ª–µ—Ç)
    row = await get_row(candidate)
    if row is None:
        await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    ticket_type = row["ticket_type"] or "-"
    status_by_id = row["status"]  # –º–æ–∂–Ω–æ –∏ await get_status_by_id(candidate)

    if status_by_id == "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω":
        await update_status_by_id(candidate, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        await message.answer(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}")
    else:
        await message.answer(f"‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ (–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫: –∞–¥–º–∏–Ω –≤—ã—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
dp.include_router(admin.router)
dp.include_router(user.router)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º deep-link –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
dp.message.register(deep_link_start_handler, F.text.startswith("/start "))


async def _set_webhook_background():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏ –≤ —Ñ–æ–Ω–µ."""
    max_attempts = 5
    delay_seconds = 2
    if not WEBHOOK_URL:
        print("[ERROR] WEBHOOK_URL is empty; cannot set webhook. Set ENV WEBHOOK_URL to public https base (e.g. https://<service>.onrender.com)")
        return
    print(f"[INIT] Target webhook URL: {FULL_WEBHOOK_URL}")
    for attempt in range(1, max_attempts + 1):
        try:
            info = await bot.get_webhook_info(request_timeout=10)
            print(f"[DEBUG] Telegram current webhook: '{info.url or ''}' (pending updates: {getattr(info, 'pending_update_count', 'n/a')})")
            if (info.url or "") != FULL_WEBHOOK_URL:
                await bot.set_webhook(
                    FULL_WEBHOOK_URL,
                    allowed_updates=["message", "callback_query", "channel_post"],
                    drop_pending_updates=False,
                    request_timeout=10,
                )
                print("‚úÖ Webhook set", flush=True)
            else:
                print("‚ÑπÔ∏è Webhook already set", flush=True)
            return
        except (TelegramNetworkError, TelegramBadRequest) as e:
            print(f"[WARN] set_webhook attempt {attempt}/{max_attempts} failed: {e}", flush=True)
            if attempt < max_attempts:
                await asyncio.sleep(delay_seconds)
                delay_seconds = min(delay_seconds * 2, 30)
            else:
                print("[ERROR] Unable to set webhook after retries", flush=True)

async def on_startup(app: web.Application):
    # –ï—Å–ª–∏ –ø–æ–¥–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–º ‚Äî —Ç–æ–∂–µ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ñ–æ–Ω:
    await connect_db()
    # –ö–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä–æ
    try:
        await bot.set_my_commands([
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
            BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å / –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"),
        ])
    except Exception as e:
        print(f"[WARN] set_my_commands: {e}")

    # –ö—Ä–∏—Ç–∏—á–Ω–æ: –Ω–µ –∂–¥—ë–º Telegram ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–º
    print(f"[INIT] WEBHOOK_URL base: '{WEBHOOK_URL}' | FULL: '{FULL_WEBHOOK_URL}'", flush=True)
    asyncio.create_task(_set_webhook_background())
    print("‚úÖ Startup finished (server will bind now)", flush=True)

async def on_shutdown(app: web.Application):
    # –ù–µ –º–µ—à–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∏–∑-–∑–∞ Telegram-–≤—ã–∑–æ–≤–æ–≤
    try:
        await bot.delete_webhook(request_timeout=5)
    except TelegramNetworkError as e:
        print(f"[WARN] delete_webhook timeout: {e}")
    await disconnect_db()

async def healthcheck(request):
    return web.Response(text="OK")

async def root(request):
    return web.Response(text="Bot is up. See /healthcheck")

async def set_webhook_now(request):
    # —Ä—É—á–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
    asyncio.create_task(_set_webhook_background())
    return web.Response(text="Webhook setup triggered")

def create_app():
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    app.router.add_get("/healthcheck", healthcheck)
    app.router.add_get("/", root)
    app.router.add_get("/set-webhook", set_webhook_now)
    return app

if __name__ == "__main__":
    port = int(os.environ.get("PORT", "10000"))
    print(f"üîä Binding HTTP server on 0.0.0.0:{port}", flush=True)
    app = create_app()
    web.run_app(app, host="0.0.0.0", port=port)
