# handlers/user.py
from aiogram import Router, F
import config
import asyncio
import json
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from config import CHANNEL_ID, PAYMENT_LINK, INSTAGRAM_LINK, ADMIN_IDS
from database import (
    add_user,  get_row,
    get_paid_status_by_id, set_paid_status_by_id,
    count_ticket_type_paid_for_event, count_ticket_type_for_event,
    log_one_plus_one_attempt, add_subscriber,
    get_one_plus_one_limit, remaining_one_plus_one_for_event,
    set_meta, get_meta, set_ticket_type_by_id,
    get_unique_one_plus_one_attempters_for_event,
)

router = Router()

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ù–∞–≤–∏–≥–∞—Ü–∏—è/—ç–∫—Ä–∞–Ω—ã ‚Äî‚Äî‚Äî‚Äî‚Äî
_AWAIT_PROMO = set()
_LAST_MSG: dict[int, int] = {}   # user_id -> last bot screen message_id

def _event_off() -> bool:
    return (config.EVENT_CODE or "").strip().lower() == "none"

def _root_text() -> str:
    return (
        "–•–µ–π! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –ñ–ê–ñ–î–ê community üñ§\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, –≥–¥–µ –ª—É—á—à–∏–µ —Ç—É—Å–æ–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üëá"
    )

def _root_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")],
        [InlineKeyboardButton(text="üì∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram", url=INSTAGRAM_LINK)],
        [InlineKeyboardButton(text="üéü –û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç", callback_data="buy_ticket_menu")]
    ])

async def _ticket_menu_kb() -> InlineKeyboardMarkup:
    rows = []
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 1+1 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏–º–∏—Ç > 0
    try:
        limit = await get_one_plus_one_limit(config.EVENT_CODE)
    except Exception:
        limit = None

    if limit and limit > 0:
        rows.append([InlineKeyboardButton(text="üé´ –ë–∏–ª–µ—Ç 1+1", callback_data="ticket_1plus1")])

    rows.append([InlineKeyboardButton(text="üé´ 1 –±–∏–ª–µ—Ç", callback_data="ticket_single")])
    rows.append([InlineKeyboardButton(text="üéü –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="ticket_promocode")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back:start")])

    return InlineKeyboardMarkup(inline_keyboard=rows)

def _back_to_start_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back:start")]
    ])

def _back_to_ticket_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back:ticket")]
    ])

def _payment_kb(row_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_LINK)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_row:{row_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back:ticket")],
    ])

# ‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ —Å —ç–∫—Ä–∞–Ω–∞ ¬´–æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞¬ª
@router.callback_query(F.data.startswith("back_to_menu:"))
async def back_from_reject(callback: CallbackQuery):
    await callback.answer()

    # row_id –ø—Ä–∏—à—ë–ª –≤ –∫–æ–ª–ª–±—ç–∫–µ
    try:
        row_id = int(callback.data.split(":")[1])
    except Exception:
        row_id = None

    # –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞¬ª ‚Äî —É–¥–∞–ª–∏–º –µ–≥–æ
    try:
        await callback.message.delete()
    except Exception:
        pass

    # –ï—Å–ª–∏ –±–∏–ª–µ—Ç—É —Å—Ç–æ—è–ª —Å—Ç–∞—Ç—É—Å ¬´–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ¬ª ‚Äî –≤–µ—Ä–Ω—ë–º –≤ ¬´–Ω–µ –æ–ø–ª–∞—Ç–∏–ª¬ª
    if row_id is not None:
        try:
            cur = await get_paid_status_by_id(row_id)
            if cur == "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ":
                await set_paid_status_by_id(row_id, "–Ω–µ –æ–ø–ª–∞—Ç–∏–ª")
        except Exception:
            pass

    # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞ (–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç)
    if _event_off():
        await _push_screen(
            callback.bot, callback.from_user.id,
            "–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç. –ú—ã —Å–æ–æ–±—â–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ. üñ§",
            _back_to_start_kb()
        )
    else:
        await _show_ticket_menu(callback.bot, callback.from_user.id)

async def _push_screen(bot, chat_id: int, text: str, kb: InlineKeyboardMarkup):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π.
       –ù–û –Ω–µ —É–¥–∞–ª—è–µ—Ç ¬´–∑–∞—â–∏—â—ë–Ω–Ω—ã–π¬ª —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    protected_id_raw = await get_meta(f"review_msg:{chat_id}")  # —Ö—Ä–∞–Ω–∏–º id ¬´–æ–∂–∏–¥–∞–Ω–∏—è¬ª
    try:
        protected_id = int(protected_id_raw) if protected_id_raw else None
    except Exception:
        protected_id = None

    last_id = _LAST_MSG.get(chat_id)
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ ¬´–∑–∞—â–∏—â—ë–Ω–Ω—ã–π¬ª
    if last_id and (protected_id is None or last_id != protected_id):
        try:
            await bot.delete_message(chat_id, last_id)
        except Exception:
            pass

    sent = await bot.send_message(chat_id, text, reply_markup=kb)
    _LAST_MSG[chat_id] = sent.message_id
    return sent

async def _show_root(bot, chat_id: int):
    return await _push_screen(bot, chat_id, _root_text(), _root_kb())

async def _show_ticket_menu(bot, chat_id: int):
    kb = await _ticket_menu_kb()
    return await _push_screen(bot, chat_id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:", kb)

async def _notify_wishers_1p1_available(bot, event_code: str):
    """
    –®–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –ø—ã—Ç–∞–ª—Å—è –∫—É–ø–∏—Ç—å 1+1, –∫–æ–≥–¥–∞ —Å–ª–æ—Ç—ã –±—ã–ª–∏ –∑–∞–Ω—è—Ç—ã.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ –±–æ–ª—å—à–µ, —á–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ 1+1.
    """
    remaining = await remaining_one_plus_one_for_event(event_code)
    if not remaining or remaining <= 0:
        return

    rows = await get_unique_one_plus_one_attempters_for_event(event_code)
    if not rows:
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéü –û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç", callback_data="ticket_1plus1")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back:ticket")],
    ])

    sent = 0
    for r in rows:
        uid = int(r["user_id"])
        try:
            await bot.send_message(
                uid,
                f"‚ú® –û—Å–≤–æ–±–æ–¥–∏–ª–∏—Å—å –±–∏–ª–µ—Ç—ã 1+1 –Ω–∞ ¬´{event_code}¬ª. –£—Å–ø–µ–π –∑–∞–±—Ä–∞—Ç—å üëá",
                reply_markup=kb
            )
            sent += 1
        except Exception:
            pass
        if sent >= remaining:
            break
        await asyncio.sleep(0.05)  # –º—è–≥–∫–∏–π rate limit


# ‚Äî‚Äî‚Äî‚Äî‚Äî –õ–æ–≥–∏–∫–∞ User ‚Äî‚Äî‚Äî‚Äî‚Äî

# /start
@router.message(CommandStart())
async def start_command(message: Message):
    await add_subscriber(message.from_user.id, message.from_user.username)
    await _show_root(message.bot, message.from_user.id)

# –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥: –≤ —Å—Ç–∞—Ä—Ç
@router.callback_query(F.data == "back:start")
async def back_start(callback: CallbackQuery):
    await callback.answer()
    await _show_root(callback.bot, callback.from_user.id)

# –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥: –≤ –º–µ–Ω—é –±–∏–ª–µ—Ç–æ–≤
@router.callback_query(F.data == "back:ticket")
async def back_ticket(callback: CallbackQuery):
    await callback.answer()
    if _event_off():
        await _push_screen(
            callback.bot,
            callback.from_user.id,
            "–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç. –ú—ã —Å–æ–æ–±—â–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ. üñ§",
            _back_to_start_kb()
        )
        return
    await _show_ticket_menu(callback.bot, callback.from_user.id)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞
@router.callback_query(F.data == "buy_ticket_menu")
async def ticket_menu(callback: CallbackQuery):
    await callback.answer()

    # –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ ‚Äî —É–¥–∞–ª–∏–º –°–ê–ú–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception:
        pass

    await add_subscriber(callback.from_user.id, callback.from_user.username)

    if _event_off():
        await _push_screen(
            callback.bot,
            callback.from_user.id,
            "–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.\n–ú—ã —Å–æ–æ–±—â–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–∏–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ. üñ§",
            _back_to_start_kb()
        )
        return

    # —Å–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ–∫—É–ø–∫–∏: paid="–Ω–µ –æ–ø–ª–∞—Ç–∏–ª", —Ç–∏–ø –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω
    username = callback.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    draft_row_id = await add_user(
        user_id=callback.from_user.id,
        username=username,
        event_code=config.EVENT_CODE,
        ticket_type="‚Äî"  # –∏–ª–∏ "pending"
    )
    #  –∑–∞–ø–æ–º–Ω–∏–º id —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await set_meta(f"draft_row:{callback.from_user.id}", str(draft_row_id))


    await _show_ticket_menu(callback.bot, callback.from_user.id)

# –ë–∏–ª–µ—Ç 1+1
@router.callback_query(F.data == "ticket_1plus1")
async def buy_1plus1(callback: CallbackQuery):
    await callback.answer()

    if _event_off():
        await _push_screen(
            callback.bot, callback.from_user.id,
            "–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ ‚Äî –ø—Ä–∏—à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üñ§",
            _back_to_start_kb()
        )
        return

    limit = await get_one_plus_one_limit(config.EVENT_CODE)
    if limit is None or limit <= 0:
        await log_one_plus_one_attempt(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            event_code=config.EVENT_CODE,
        )
        await _push_screen(
            callback.bot, callback.from_user.id,
            "‚ùå –ê–∫—Ü–∏—è '1+1' —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
            _back_to_ticket_kb()
        )
        return

    left = await remaining_one_plus_one_for_event(config.EVENT_CODE)
    if left is not None and left <= 0:
        await log_one_plus_one_attempt(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            event_code=config.EVENT_CODE,
        )
        await _push_screen(
            callback.bot, callback.from_user.id,
            "‚ùå –ê–∫—Ü–∏—è '1+1' –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
            _back_to_ticket_kb()
        )
        return

    await _present_payment(callback, ticket_type="1+1")

# 1 –±–∏–ª–µ—Ç
@router.callback_query(F.data == "ticket_single")
async def buy_single(callback: CallbackQuery):
    await callback.answer()

    if _event_off():
        await _push_screen(
            callback.bot, callback.from_user.id,
            "–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ ‚Äî –ø—Ä–∏—à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üñ§",
            _back_to_start_kb()
        )
        return
    await _present_payment(callback, ticket_type="single")

# –ü—Ä–æ–º–æ–∫–æ–¥ ‚Äî –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞
@router.callback_query(F.data == "ticket_promocode")
async def ask_promocode(callback: CallbackQuery):
    await callback.answer()

    if _event_off():
        await _push_screen(
            callback.bot, callback.from_user.id,
            "–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ‚Äî –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥. üñ§",
            _back_to_start_kb()
        )
        return

    _AWAIT_PROMO.add(callback.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="promo_cancel")],
    ])
    await _push_screen(callback.bot, callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", kb)

# –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@router.callback_query(F.data == "promo_cancel")
async def cancel_promocode(callback: CallbackQuery):
    await callback.answer()
    _AWAIT_PROMO.discard(callback.from_user.id)
    if _event_off():
        await _push_screen(
            callback.bot, callback.from_user.id,
            "–û—Ç–º–µ–Ω–µ–Ω–æ. –°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç. /start",
            _back_to_start_kb()
        )
    else:
        await _show_ticket_menu(callback.bot, callback.from_user.id)


async def _get_event_promocodes() -> set[str]:
    """
    –ß–∏—Ç–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ bot_meta –ø–æ –∫–ª—é—á—É 'promocodes:<EVENT_CODE>',
    –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω. –û–∂–∏–¥–∞–µ—Ç—Å—è JSON-—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –≤ UPPERCASE.
    –ï—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ –Ω–∞ config.PROMOCODES, –µ—Å–ª–∏ –º–µ—Ç—ã –Ω–µ—Ç.
    """
    codes: set[str] = set()

    # –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî –º–µ—Ç–∞ (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–æ–º)
    raw = await get_meta(f"promocodes:{config.EVENT_CODE}")
    lst = None
    if raw:
        try:
            lst = json.loads(raw)
        except Exception:
            lst = None

    if isinstance(lst, list):
        for c in lst:
            if isinstance(c, str) and c.strip():
                codes.add(c.strip().upper())
    elif isinstance(lst, str):
        # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π "AAA, BBB"
        parts = [p.strip() for p in lst.split(",")]
        for c in parts:
            if c:
                codes.add(c.upper())

    # —Ñ–æ–ª–±—ç–∫: –µ—Å–ª–∏ –∞–¥–º–∏–Ω –µ—â—ë –Ω–µ –∑–∞–¥–∞–ª –º–µ—Ç—É ‚Äî –±–µ—Ä—ë–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        from config import PROMOCODES as CFG_CODES  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        codes |= {str(c).strip().upper() for c in CFG_CODES if str(c).strip()}
    except Exception:
        pass

    return codes

# –õ–æ–≤–∏–º –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@router.message(F.text & ~F.text.startswith("/"))
async def handle_promocode(message: Message):
    if message.from_user.id not in _AWAIT_PROMO:
        return

    if _event_off():
        _AWAIT_PROMO.discard(message.from_user.id)
        await _push_screen(
            message.bot, message.from_user.id,
            "–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç. –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ.",
            _back_to_start_kb()
        )
        return

    user_code = (message.text or "").strip().upper()
    valid_codes = await _get_event_promocodes()

    if user_code not in valid_codes:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    _AWAIT_PROMO.discard(message.from_user.id)
    # –ü–µ—Ä–µ–¥–∞—ë–º —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ ticket_type (—Ü–µ–Ω–∞ –±–µ—Ä—ë—Ç—Å—è –ø–æ –∫–ª—é—á—É 'promocode')
    await _present_payment(message, ticket_type=user_code, from_message=True)


async def _price_for_ticket(ticket_type: str) -> int | None:
    """
    –ë–µ—Ä—ë–º —Ü–µ–Ω—ã –∏–∑ bot_meta –ø–æ –∫–ª—é—á—É prices:<EVENT_CODE>, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—Å–∞–ª –∞–¥–º–∏–Ω –≤ /change_event.
    –§–æ—Ä–º–∞—Ç: {"1+1": 1000, "single": 700, "promocode": 500}
    –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –±–µ—Ä—ë–º —Ü–µ–Ω—É "promocode".
    """
    raw = await get_meta(f"prices:{config.EVENT_CODE}")
    try:
        prices = json.loads(raw) if raw else {}
    except Exception:
        prices = {}

    key = "1+1" if ticket_type == "1+1" else ("single" if ticket_type == "single" else "promocode")
    val = prices.get(key)
    try:
        return int(val)
    except Exception:
        return None

# –≠–∫—Ä–∞–Ω –æ–ø–ª–∞—Ç—ã (—Å–æ–∑–¥–∞—ë—Ç –ø–æ–∫—É–ø–∫—É)
async def _present_payment(obj, ticket_type: str, from_message: bool = False):
    # –∑–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–æ–∫
    if _event_off():
        target = obj.message if hasattr(obj, "message") else obj
        await _push_screen(
            target.bot, target.chat.id,
            "–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç. –°–∫–æ—Ä–æ —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø—Ä–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ. üñ§",
            _back_to_start_kb()
        )
        return

# ... –≤—ã—à–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ _event_off() –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    user = obj.from_user
    user_id = user.id
    username = user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

# –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç"
    draft_raw = await get_meta(f"draft_row:{user_id}")
    row_id = None
    if draft_raw:
        try:
            row_id = int(draft_raw)
        except Exception:
            row_id = None

    if row_id:
    # –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        await set_ticket_type_by_id(row_id, ticket_type)
    else:
    # —Ñ–æ–ª–±—ç–∫: –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é (–µ—Å–ª–∏ –º–µ—Ç—ã –Ω–µ—Ç)
        row_id = await add_user(
            user_id=user_id,
            username=username,
            event_code=config.EVENT_CODE,
            ticket_type=ticket_type
        )
        await set_meta(f"draft_row:{user_id}", str(row_id))

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚Äî —Å—Ç–∞—Ç—É—Å "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã"
    await set_paid_status_by_id(row_id, "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã")


    # –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    title_map = {"single": "1 –±–∏–ª–µ—Ç", "1+1": "–ë–∏–ª–µ—Ç 1+1"}
    pretty_type = title_map.get(ticket_type, f"–ü—Ä–æ–º–æ–∫–æ–¥ ¬´{ticket_type}¬ª")

    # –¶–µ–Ω–∞
    price = await _price_for_ticket(ticket_type)
    price_line = f"\n–¶–µ–Ω–∞: {price}" if price is not None else ""

    text = (
        f"–¢–∏–ø –±–∏–ª–µ—Ç–∞: {pretty_type}\n"
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {config.EVENT_CODE}"
        f"{price_line}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.\n"
        "‚è≥–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç!\n"
        "‚ùóÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Å–≤–æ–π Telegram-–Ω–∏–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–ª–∞—Ç–µ–∂–∞."
    )

    bot = obj.bot
    sent = await _push_screen(bot, user_id, text, _payment_kb(row_id))

    # —Ç–∞–π–º–µ—Ä 5 –º–∏–Ω—É—Ç
    asyncio.create_task(
        _expire_payment_after(
            bot=bot,
            chat_id=user_id,
            message_id=sent.message_id,
            row_id=row_id,
            timeout_sec=10
        )
    )

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª
@router.callback_query(F.data.startswith("paid_row:"))
async def payment_confirmation(callback: CallbackQuery):
    await callback.answer()
    user = callback.from_user
    row_id = int(callback.data.split(":")[1])
    username = user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    row = await get_row(row_id)
    if not row:
        await _push_screen(
            callback.bot, user.id,
            "‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            _back_to_ticket_kb()
        )
        return

    ticket_type = row["ticket_type"] or "-"
    paid_status = await get_paid_status_by_id(row_id)

    if paid_status == "–æ–ø–ª–∞—Ç–∏–ª":
        await _push_screen(
            callback.bot, user.id,
            "‚úÖ –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏. QR-–∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.",
            _back_to_start_kb()
        )
        return
    if paid_status == "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ":
        await _push_screen(
            callback.bot, user.id,
            "‚è≥ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            _back_to_start_kb()
        )
        return

    await set_paid_status_by_id(row_id, "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")

    # –ü–æ–∫–∞–∂–µ–º ¬´–∑–∞—â–∏—â—ë–Ω–Ω—ã–π¬ª —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è –∏ –∑–∞–ø–æ–º–Ω–∏–º –µ–≥–æ message_id
    sent = await _push_screen(
        callback.bot, user.id,
        "‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.",
        _back_to_start_kb()
    )
    # –∑–∞—â–∏—Ç–∏–º —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω –æ—Ç –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è
    await set_meta(f"review_msg:{user.id}", str(sent.message_id))


    # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    kb_admin = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_row:{row_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",   callback_data=f"reject_row:{row_id}")]
    ])
    recipient_id = getattr(config, "PAYMENTS_ADMIN_ID", None) or (ADMIN_IDS[0] if ADMIN_IDS else None)
    if recipient_id:
        await callback.bot.send_message(
            chat_id=recipient_id,
            text=f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}",
            reply_markup=kb_admin
        )

# /help
@router.message(lambda m: m.text == "/help")
async def help_command(message: Message):
    await _push_screen(
        message.bot, message.from_user.id,
        "‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n@Manch7",
        _back_to_start_kb()
    )

# –¢–∞–π–º-–∞—É—Ç –æ–ø–ª–∞—Ç—ã
async def _expire_payment_after(bot, chat_id: int, message_id: int, row_id: int, timeout_sec: int = 300):
    await asyncio.sleep(timeout_sec)

    # —É–∑–Ω–∞–µ–º —Ç–∏–ø –±–∏–ª–µ—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏–µ (–≤–∞–∂–Ω–æ –¥–ª—è 1+1)
    row = await get_row(row_id)
    ticket_type = (row["ticket_type"] or "").strip().lower() if row else ""
    event_code = row["event_code"] if row else None
    
    from database import get_paid_status_by_id
    status = await get_paid_status_by_id(row_id)

    if status in ("–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã"):
        # –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å—ë, —á—Ç–æ –Ω–µ "–Ω–µ –æ–ø–ª–∞—Ç–∏–ª", –≤ "–Ω–µ –æ–ø–ª–∞—Ç–∏–ª"
        if status != "–Ω–µ –æ–ø–ª–∞—Ç–∏–ª":
            try:
                await set_paid_status_by_id(row_id, "–Ω–µ –æ–ø–ª–∞—Ç–∏–ª")
            except Exception:
                pass        
        try:
            await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        except Exception:
            pass

        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + —Ç–æ –∂–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞
        kb = await _ticket_menu_kb()
        await _push_screen(
            bot, chat_id,
            "‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ:",
            kb
        )
        
        # –µ—Å–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è —Å–ª–æ—Ç 1+1 ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –∂–µ–ª–∞—é—â–∏—Ö
        if ticket_type == "1+1" and event_code:
            await _notify_wishers_1p1_available(bot, event_code)
