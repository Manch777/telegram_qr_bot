from aiogram import Router, F
from aiogram.types import FSInputFile, Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, WebAppInfo
from aiogram.filters import CommandStart
from config import CHANNEL_ID, INSTAGRAM_LINK, ADMIN_IDS, PAYMENT_LINK
from database import (
    add_user, update_status, get_status,
    get_paid_status, set_paid_status,
    count_registered, count_activated,
    get_registered_users, get_paid_users,
    clear_database
)
from qr_generator import generate_qr

router = Router()

@router.message(CommandStart())
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")],
        [InlineKeyboardButton(text="üì∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram", url=INSTAGRAM_LINK)],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])
    await message.answer("–•–µ–π! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –ñ–ê–ñ–î–ê community üñ§
                           –¢–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, –≥–¥–µ –ª—É—á—à–∏–µ —Ç—É—Å–æ–≤–∫–∏

                           –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É —Å–æ —Å–∫–∏–¥–∫–æ–π üëá", reply_markup=keyboard)

@router.callback_query(F.data == "check_subscription")
async def check_subscription(callback: CallbackQuery):
    user = callback.from_user
    user_id = user.id
    username = user.username

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    member = await callback.bot.get_chat_member(CHANNEL_ID, user_id)

    if member.status not in ["member", "administrator", "creator"]:
        await callback.message.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ Telegram-–∫–∞–Ω–∞–ª!")
        return
    

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ QR
    status = await get_status(user_id)
    paid_status = await get_paid_status(user_id)  # –¥–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

    if status is not None:
        # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
        if paid_status == "–æ–ø–ª–∞—Ç–∏–ª":
            await callback.message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ QR-–∫–æ–¥ —Ä–∞–Ω–µ–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        elif paid_status == "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ":
            await callback.message.answer("üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞.")
        else:
            await callback.message.answer("‚ùóÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ.")
        return

    await add_user(user_id, username)

 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_LINK)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{user_id}")]
    ])
    await callback.message.answer("–í–∞—É! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤—Å–µ —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ú®
                                    –¢–≤–æ—è —Å–∫–∏–¥–∫–∞ 50% –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ - 250 —Ä—É–±

                                   ‚ùóÔ∏è–ù–µ –∑–∞–±—É–¥—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ –≤ telegram 

                                    –ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç—å?", reply_markup=kb)

@router.callback_query(F.data.startswith("paid:"))
async def payment_confirmation(callback: CallbackQuery):
    user = callback.from_user
    user_id = int(callback.data.split(":")[1])
    username = user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    paid_status = await get_paid_status(user_id)

    if paid_status == "–æ–ø–ª–∞—Ç–∏–ª":
        await callback.answer("‚úÖ –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏. QR-–∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.", show_alert=True)
        return
    elif paid_status == "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ":
        await callback.answer("‚è≥ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã

    await set_paid_status(user_id, "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")

    await callback.message.edit_reply_markup(reply_markup=None)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    
    await callback.message.answer("‚è≥ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for admin_id in ADMIN_IDS:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve:{user_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", callback_data=f"reject:{user_id}")]
        ])
        await callback.bot.send_message(
            chat_id=admin_id,
            text=f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É.",
            reply_markup=kb
        )

@router.message(lambda msg: msg.text == "/help")
async def help_command(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
        "@Manch7\n\n"
    )
