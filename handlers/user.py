# handlers/user.py
from aiogram import Router, F
import config
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from config import CHANNEL_ID, PAYMENT_LINK, INSTAGRAM_LINK, PROMOCODES, EVENT_CODE, ADMIN_IDS
from database import (
    add_user,  get_row,                             # -> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç row_id (id —Å—Ç—Ä–æ–∫–∏ –ø–æ–∫—É–ø–∫–∏)
    get_paid_status_by_id, set_paid_status_by_id,
    count_ticket_type_paid_for_event, count_ticket_type_for_event,
)

router = Router()

# –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–±–µ–∑ FSM, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å main.py)
_AWAIT_PROMO = set()   # set[int] of user_id


# /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + 2 –∫–Ω–æ–ø–∫–∏
@router.message(CommandStart())
async def start_command(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")],
        [InlineKeyboardButton(text="üì∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram", url=INSTAGRAM_LINK)],
        [InlineKeyboardButton(text="üéü –û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç", callback_data="buy_ticket_menu")]
    ])
    text = (
        "–•–µ–π! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –ñ–ê–ñ–î–ê community üñ§\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, –≥–¥–µ –ª—É—á—à–∏–µ —Ç—É—Å–æ–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üëá"
    )
    await message.answer(text, reply_markup=kb)


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞
@router.callback_query(F.data == "buy_ticket_menu")
async def ticket_menu(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé´ –ë–∏–ª–µ—Ç 1+1", callback_data="ticket_1plus1")],
        [InlineKeyboardButton(text="üé´ 1 –±–∏–ª–µ—Ç", callback_data="ticket_single")],
        [InlineKeyboardButton(text="üéü –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="ticket_promocode")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:", reply_markup=kb)


# –ë–∏–ª–µ—Ç 1+1 (–ª–∏–º–∏—Ç 5 –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ–∫—É—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ)
@router.callback_query(F.data == "ticket_1plus1")
async def buy_1plus1(callback: CallbackQuery):
    # –ª–∏–º–∏—Ç 5 –ø—Ä–æ–¥–∞–∂ –Ω–∞ –¢–ï–ö–£–©–ï–ï –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    count = await count_ticket_type_for_event(config.EVENT_CODE, "1+1")
    if count >= 5:
        await callback.message.answer("‚ùå –ê–∫—Ü–∏—è '1+1' –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ª–∏–º–∏—Ç 5 –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤).")
        return
    await process_payment(callback, "1+1")
    
# 1 –±–∏–ª–µ—Ç
@router.callback_query(F.data == "ticket_single")
async def buy_single(callback: CallbackQuery):
    await _present_payment(callback, ticket_type="single")


# –ü—Ä–æ–º–æ–∫–æ–¥ ‚Äî –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞
@router.callback_query(F.data == "ticket_promocode")
async def ask_promocode(callback: CallbackQuery):
    _AWAIT_PROMO.add(callback.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="promo_cancel")]
    ])
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", reply_markup=kb)


# –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@router.callback_query(F.data == "promo_cancel")
async def cancel_promocode(callback: CallbackQuery):
    _AWAIT_PROMO.discard(callback.from_user.id)
    await callback.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é: /start")


# –õ–æ–≤–∏–º –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã)
@router.message(F.text & ~F.text.startswith("/"))
async def handle_promocode(message: Message):
    if message.from_user.id not in _AWAIT_PROMO:
        return

    code = (message.text or "").strip().upper()
    if code not in PROMOCODES:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return

    # –£—Å–ø–µ—Ö ‚Äî –±–æ–ª—å—à–µ –Ω–µ –∂–¥—ë–º –∫–æ–¥
    _AWAIT_PROMO.discard(message.from_user.id)
    await _present_payment(message, ticket_type="promocode", from_message=True)


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ–ø–ª–∞—Ç—ã ‚Äî –°–û–ó–î–ê–Å–¢ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É) –∏ –¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª"
async def _present_payment(obj, ticket_type: str, from_message: bool = False):
    user = obj.from_user
    user_id = user.id
    username = user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    # –ö–∞–∂–¥–∞—è –ø–æ–∫—É–ø–∫–∞ = –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –ë–î
    row_id = await add_user(user_id=user_id, username=username, event_code=EVENT_CODE, ticket_type=ticket_type)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_LINK)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_row:{row_id}")]
    ])
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {ticket_type}\n"
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {EVENT_CODE}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.\n"
        "‚ùóÔ∏è–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram-–Ω–∏–∫."
    )
    if from_message:
        await obj.answer(text, reply_markup=kb)
    else:
        await obj.message.answer(text, reply_markup=kb)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–Ø –æ–ø–ª–∞—Ç–∏–ª" ‚Äî –ø–æ –ö–û–ù–ö–†–ï–¢–ù–û–ô –ø–æ–∫—É–ø–∫–µ (row_id)
@router.callback_query(F.data.startswith("paid_row:"))
async def payment_confirmation(callback: CallbackQuery):
    user = callback.from_user
    row_id = int(callback.data.split(":")[1])
    username = user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    # 1) –ë–µ—Ä—ë–º –ø–æ–∫—É–ø–∫—É –ø–æ row_id
    row = await get_row(row_id)
    if not row:
        await callback.answer("‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    ticket_type = row["ticket_type"] or "-"
    paid_status = row["paid"]

    paid_status = await get_paid_status_by_id(row_id)
    if paid_status == "–æ–ø–ª–∞—Ç–∏–ª":
        await callback.answer("‚úÖ –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏. QR-–∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.", show_alert=True)
        return
    if paid_status == "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ":
        await callback.answer("‚è≥ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=True)
        return

    # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ" —Ç–æ–ª—å–∫–æ –¥–ª—è –≠–¢–û–ô –ø–æ–∫—É–ø–∫–∏
    await set_paid_status_by_id(row_id, "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ —Å –∫–æ–ª–ª–±—ç–∫–∞–º–∏ –ø–æ row_id
    kb_admin = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_row:{row_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",   callback_data=f"reject_row:{row_id}")]
    ])
    for admin_id in ADMIN_IDS:
        await callback.bot.send_message(
            chat_id=admin_id,
            text=f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}",
            reply_markup=kb_admin
        )


# /help
@router.message(lambda m: m.text == "/help")
async def help_command(message: Message):
    await message.answer("‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî @Manch7")
