from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
from config import CHANNEL_ID, INSTAGRAM_LINK, ADMIN_IDS, PAYMENT_LINK, PROMOCODES
from database import (
    add_user, update_status, get_status,
    get_paid_status, set_paid_status,
    count_registered, count_activated,
    get_registered_users, get_paid_users,
    clear_database, count_ticket_type, set_ticket_type
)
from qr_generator import generate_qr

router = Router()

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
PROMOCODES = ["PROMO2025", "DISCOUNT50", "FREEENTRY"]

@router.message(CommandStart())
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")],
        [InlineKeyboardButton(text="üéü –û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç", callback_data="buy_ticket_menu")]
    ])
    text = (
        "–•–µ–π! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –ñ–ê–ñ–î–ê community üñ§\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, –≥–¥–µ –ª—É—á—à–∏–µ —Ç—É—Å–æ–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üëá"
    )
    await message.answer(text, reply_markup=keyboard)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞
@router.callback_query(F.data == "buy_ticket_menu")
async def ticket_menu(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé´ –ë–∏–ª–µ—Ç 1+1", callback_data="ticket_1plus1")],
        [InlineKeyboardButton(text="üé´ 1 –±–∏–ª–µ—Ç", callback_data="ticket_single")],
        [InlineKeyboardButton(text="üéü –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="ticket_promocode")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:", reply_markup=kb)

# 1+1 –±–∏–ª–µ—Ç
@router.callback_query(F.data == "ticket_1plus1")
async def buy_1plus1(callback: CallbackQuery):
    count = await count_ticket_type("1+1")
    if count >= 5:
        await callback.message.answer("‚ùå –ê–∫—Ü–∏—è '1+1' –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ª–∏–º–∏—Ç –≤ 5 –ø—Ä–æ–¥–∞–∂ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return
    await process_payment(callback, "1+1")

# 1 –±–∏–ª–µ—Ç
@router.callback_query(F.data == "ticket_single")
async def buy_single(callback: CallbackQuery):
    await process_payment(callback, "single")

# –ü—Ä–æ–º–æ–∫–æ–¥
@router.callback_query(F.data == "ticket_promocode")
async def ask_promocode(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
    # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–π–º–∞—Ç—å –≤–≤–æ–¥
    await update_status(callback.from_user.id, "waiting_promocode")

@router.message(F.text & ~F.text.startswith("/"))
async def handle_promocode(message: Message):
    status = await get_status(message.from_user.id)
    if status != "waiting_promocode":
        return

    code = (message.text or "").strip().upper()
    if code not in PROMOCODES:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–∏–ø –±–∏–ª–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–æ—Ä–º—É
    await set_ticket_type(message.from_user.id, "promocode")
    await update_status(message.from_user.id, "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø–ª–∞—Ç—É –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    await process_payment(message, "promocode", from_message=True)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã
async def process_payment(callback_or_message, ticket_type, from_message=False):
    user_id = callback_or_message.from_user.id
    username = callback_or_message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    paid_status = await get_paid_status(user_id)
    if paid_status == "–æ–ø–ª–∞—Ç–∏–ª":
        if from_message:
            await callback_or_message.answer("‚úÖ –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏. QR-–∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.")
        else:
            await callback_or_message.answer("‚úÖ –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏. QR-–∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø –±–∏–ª–µ—Ç–∞ –≤ –ë–î
    await add_user(user_id, username)
    await set_ticket_type(user_id, ticket_type)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_LINK)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{user_id}")]
    ])
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–∏–ª–µ—Ç: {ticket_type}\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 250 —Ä—É–± (–∏–ª–∏ —Å–∫–∏–¥–∫–∞ –ø–æ –∞–∫—Ü–∏–∏/–ø—Ä–æ–º–æ–∫–æ–¥—É)\n\n"
        "‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ –≤ Telegram."
    )
    if from_message:
        await callback_or_message.answer(text, reply_markup=kb)
    else:
        await callback_or_message.message.answer(text, reply_markup=kb)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.callback_query(F.data.startswith("paid:"))
async def payment_confirmation(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    username = callback.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    paid_status = await get_paid_status(user_id)
    if paid_status == "–æ–ø–ª–∞—Ç–∏–ª":
        await callback.answer("‚úÖ –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏. QR-–∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.", show_alert=True)
        return
    elif paid_status == "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ":
        await callback.answer("‚è≥ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=True)
        return

    await set_paid_status(user_id, "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚è≥ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")

    ticket_type = await get_status(user_id)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ get_status —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ticket_type
    for admin_id in ADMIN_IDS:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve:{user_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", callback_data=f"reject:{user_id}")]
        ])
        await callback.bot.send_message(
            chat_id=admin_id,
            text=f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É.\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}",
            reply_markup=kb
        )

@router.message(lambda msg: msg.text == "/help")
async def help_command(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
        "@Manch7"
    )
