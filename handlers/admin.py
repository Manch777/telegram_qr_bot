from aiogram import Router, F
import config
import json
import asyncio
from config import PAYMENTS_ADMIN_ID, SCANNER_ADMIN_IDS, INSTAGRAM_LINK, ADMIN_BROADCAST_PASSWORD
import re
from openpyxl import Workbook
from io import BytesIO
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter, Command
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    FSInputFile, BufferedInputFile, BotCommand, BotCommandScopeChat
)
from qr_generator import generate_qr
from database import (
    # —Ä–∞–±–æ—Ç–∞ –ø–æ row_id
    get_row, get_paid_status_by_id, set_paid_status_by_id,
    get_status_by_id, update_status_by_id, get_status, update_status,
    # –æ—Ç—á—ë—Ç—ã / —Å–ø–∏—Å–∫–∏
    count_registered, count_activated, count_paid,
    get_registered_users, get_paid_users,
    # –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    clear_database, get_unique_one_plus_one_attempters_for_event,
    get_all_subscribers, set_meta, get_meta, get_all_recipient_ids,
    set_one_plus_one_limit, get_one_plus_one_limit,
    count_one_plus_one_taken, remaining_one_plus_one_for_event,
    get_ticket_stats_grouped, get_ticket_stats_for_event,
    get_all_users_full, get_all_subscribers,
)
from config import SCAN_WEBAPP_URL, ADMIN_IDS, CHANNEL_ID, PAYMENT_LINK, ADMIN_EVENT_PASSWORD

router = Router()


def is_full_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

def is_scanner_admin(uid: int) -> bool:
    # —Å–∫–∞–Ω–µ—Ä-–¥–æ—Å—Ç—É–ø —É —Å–∫–∞–Ω–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –∏ —É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    return uid in SCANNER_ADMIN_IDS or uid in ADMIN_IDS

# =========================
# /admin ‚Äî –ø–∞–Ω–µ–ª—å
# =========================
@router.message(lambda msg: msg.text == "/admin")
async def admin_panel(message: Message):
    uid = message.from_user.id

    if is_full_admin(uid):

        await message.bot.set_my_commands([
            BotCommand(command="report", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="scanner", description="üì∑ –û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä"),
            BotCommand(command="change_event", description="üîÅ –°–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"),
            BotCommand(command="broadcast_last", description="üì£ –†–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç"),  # <-- –¥–æ–±–∞–≤–∏–ª–∏
            BotCommand(command="wishers", description="üìù –ö—Ç–æ —Ö–æ—Ç–µ–ª 1+1"),
            BotCommand(command="stats_this", description="üìä C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤"),
            BotCommand(command="scan_access_menu", description="üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∫–∞–Ω–µ—Ä—É"),            
            BotCommand(command="export_users", description="üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É (–≤—Å–µ)"),
            BotCommand(command="export_users_this", description="üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É (—Ç–µ–∫—É—â–µ–µ)"),
            BotCommand(command="clear_db", description="–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É"),
            BotCommand(command="exit_admin", description="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é"),
        ], scope={"type": "chat", "chat_id": message.from_user.id})

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì£ –†–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç", callback_data="broadcast_last")]
        ])
        await message.answer("üõ° –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∫–ª—é—á—ë–Ω.")
        return
    
    if await _can_use_scanner(uid):
        # –¢–æ–ª—å–∫–æ —Å–∫–∞–Ω–µ—Ä
        await message.bot.set_my_commands([
            BotCommand(command="scanner", description="üì∑ –û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä"),
            BotCommand(command="exit_admin", description="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é"),
        ], scope={"type": "chat", "chat_id": uid})


        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∑ –û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä", url=SCAN_WEBAPP_URL)]
        ])
        await message.answer("üõ° –†–µ–∂–∏–º —Å–∫–∞–Ω–µ—Ä–∞ –≤–∫–ª—é—á—ë–Ω.", reply_markup=kb)
        return

    await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



# =========================
# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ WebApp
# –û–∂–∏–¥–∞–µ–º payload –≤–∏–¥–∞ "row_id:ticket_type"
# =========================
@router.message(lambda msg: msg.web_app_data is not None)
async def handle_webapp_data(message: Message):
    if not await _can_use_scanner(message.from_user.id):
        await message.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    payload = (message.web_app_data.data or "").strip()
    if not payload:
        await message.answer("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫–∞–Ω–µ—Ä–∞.")
        return

    # 1) –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–∫–∞–∫ —Ä–∞–Ω—å—à–µ): –≤ payload —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ (user_id)
    if payload.isdigit():
        user_id = int(payload)
        status = await get_status(user_id)
        if status is None:
            await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif status == "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω":
            await update_status(user_id, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await message.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£–¥–∞—á–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
        else:
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        return

    # 2) –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: R:<row_id>, QR:<...>, <row_id>:—á—Ç–æ-—É–≥–æ–¥–Ω–æ
    p = payload.lstrip()
    if p.lower().startswith("qr:"):
        p = p[3:].lstrip()
    if p.lower().startswith("r:"):
        p = p[2:].lstrip()

    num_str = p.split(":", 1)[0]
    try:
        candidate = int(num_str)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR.")
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º, –∫–∞–∫ —Ä–∞–Ω—å—à–µ, —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –∫–∞–∫ user_id (–µ—Å–ª–∏ —Å–∫–∞–Ω–µ—Ä –≤—Å—ë –µ—â—ë —à–ª—ë—Ç user_id —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º)
    status = await get_status(candidate)
    if status is not None:
        if status == "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω":
            await update_status(candidate, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await message.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£–¥–∞—á–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
        else:
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        return

    # –ò–Ω–∞—á–µ —ç—Ç–æ row_id ‚Äî –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ (–æ–¥–Ω–∞ –ø–æ–∫—É–ø–∫–∞ = –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
    row = await get_row(candidate)
    if row is None:
        await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    status_by_id = await get_status_by_id(candidate)
    if status_by_id == "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω":
        await update_status_by_id(candidate, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        await message.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£–¥–∞—á–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
    else:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

# =========================
# /report ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# =========================
@router.message(lambda msg: msg.text == "/report")
async def report(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    total = await count_registered()
    active = await count_activated()
    inactive = total - active
    chat_count = await message.bot.get_chat_member_count(CHANNEL_ID)
    paid_count = await count_paid()

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {chat_count}\n"
        f"üë§ –°–æ–∑–¥–∞–Ω–æ –ø–æ–∫—É–ø–æ–∫: {total}\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {paid_count}\n"
        f"‚úÖ –ü—Ä–∏—à–ª–∏: {active}\n"
        f"‚ùå –ù–µ –ø—Ä–∏—à–ª–∏: {inactive}"
    )

# =========================
# /export_users ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –í–°–ï –ø–æ–∫—É–ø–∫–∏ –≤ Excel
# /export_users_this ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –¢–ï–ö–£–©–ï–ì–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
# =========================
@router.message(lambda m: m.text in ("/export_users", "/export_users_this"))
async def export_users_excel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    only_this = (message.text == "/export_users_this")
    rows = await get_all_users_full(config.EVENT_CODE if only_this else None)
    if not rows:
        await message.answer("–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
        return

    # –ì–æ—Ç–æ–≤–∏–º Excel
    wb = Workbook()
    ws = wb.active
    ws.title = "users"

    # –®–∞–ø–∫–∞
    headers = [
        "id", "user_id", "username", "event_code",
        "ticket_type", "paid", "status", "purchase_date"
    ]
    ws.append(headers)

    # –î–∞–Ω–Ω—ã–µ
    for r in rows:
        ws.append([
            r["id"],
            r["user_id"],
            r["username"],
            r["event_code"],
            r["ticket_type"],
            r["paid"],
            r["status"],
            r["purchase_date"],  # —ç—Ç–æ date –∏–∑ –ë–î ‚Äî openpyxl —Å—ä–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        ])

    buf = BytesIO()
    wb.save(buf)
    buf.seek(0)

    fname = "users.xlsx" if not only_this else f"users_{config.EVENT_CODE}.xlsx"
    await message.answer_document(
        document=BufferedInputFile(buf.getvalue(), filename=fname),
        caption="üìÑ –í—ã–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã users"
    )
        
# =========================
# /stats ‚Äî –≤–∏—Ç—Ä–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂ (—Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ)
# /stats_all ‚Äî –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ + –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
# =========================

# –ü–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é –∏–∑ config.EVENT_CODE
@router.message(lambda m: m.text == "/stats_this")
async def ticket_stats_this(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    ev = config.EVENT_CODE
    rows = await get_ticket_stats_for_event(ev, paid_statuses=("–æ–ø–ª–∞—Ç–∏–ª",))
    if not rows:
        await message.answer(f"–î–ª—è ¬´{ev}¬ª –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç.")
        return

    total = sum(int(r["count"]) for r in rows)
    parts = [f"üìä ¬´{ev}¬ª: —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ", ""]
    for r in rows:
        parts.append(f"‚Ä¢ {r['ticket_type']}: {int(r['count'])}")
    parts.append("")
    parts.append(f"–ò–¢–û–ì–û: {total}")

    await message.answer("\n".join(parts))


# =========================
# /exit_admin ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞
# =========================
@router.message(lambda msg: msg.text == "/exit_admin")
async def exit_admin_mode(message: Message):
    if not await _can_use_scanner(message.from_user.id):
        return

    await message.bot.delete_my_commands(scope=BotCommandScopeChat(chat_id=message.from_user.id))
    await message.bot.set_my_commands(
        [
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
            BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å / –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"),
            BotCommand(command="admin", description="üõ° –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),

        ],
        scope=BotCommandScopeChat(chat_id=message.from_user.id),  # <-- –≤–∞–∂–µ–Ω —Ç–æ—Ç –∂–µ scope
    )
    await message.answer("‚Ü©Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    
# =========================
# /scanner ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Å–∫–∞–Ω–µ—Ä
# =========================
@router.message(lambda msg: msg.text == "/scanner")
async def scanner_command(message: Message):
    if not await _can_use_scanner(message.from_user.id):
        await message.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ –û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä", url=SCAN_WEBAPP_URL)]
    ])
    await message.answer("–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=keyboard)    

    
# =========================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ row_id
# =========================
@router.callback_query(F.data.startswith("approve_row:"))
async def approve_payment(callback: CallbackQuery):
    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶", show_alert=False)
    row_id = int(callback.data.split(":")[1])

    row = await get_row(row_id)
    if not row:
        await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # —Å—Ç–∞–≤–∏–º –æ–ø–ª–∞—Ç—É –∏ –≥–µ–Ω–µ—Ä–∏–º QR
    await set_paid_status_by_id(row_id, "–æ–ø–ª–∞—Ç–∏–ª")

    ticket_type = row["ticket_type"]
    event_code = row["event_code"] or "-"   # <-- –≤–º–µ—Å—Ç–æ row.get(...)

    png_bytes = await generate_qr(row_id)
    photo = BufferedInputFile(png_bytes, filename=f"ticket_{row_id}.png")

    await callback.bot.send_photo(
        chat_id=row["user_id"],
        photo=photo,
        caption=(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"–í–∞—à –±–∏–ª–µ—Ç ‚Ññ{row_id}\n"
            f"–¢–∏–ø: {ticket_type}\n"
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_code}"
        )
    )

    await callback.message.edit_text(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. QR –ø–æ –±–∏–ª–µ—Ç—É #{row_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    
    # –°–Ω–∏–º–µ–º ¬´–∑–∞—â–∏—Ç—É¬ª –∏ —É–¥–∞–ª–∏–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –≤–∏—Å–∏—Ç
    uid = row["user_id"]
    protected_id_raw = await get_meta(f"review_msg:{uid}")
    if protected_id_raw:
        try:
            await callback.bot.delete_message(uid, int(protected_id_raw))
        except Exception:
            pass
# –æ—á–∏—Å—Ç–∏–º –º–µ—Ç—É (—Å–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞—â–∏—Ç–∞ —Å–Ω—è—Ç–∞)
    await set_meta(f"review_msg:{uid}", "")
    
# =========================
# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ row_id
# =========================
@router.callback_query(F.data.startswith("reject_row:"))
async def reject_payment(callback: CallbackQuery):
    row_id = int(callback.data.split(":")[1])
    row = await get_row(row_id)
    if not row:
        await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await set_paid_status_by_id(row_id, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_LINK)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_row:{row_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data=f"back_to_menu:{row_id}")],
    ])
    sent = await callback.bot.send_message(
        chat_id=row["user_id"],
        text=(
            "üö´ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @Manch7"
        ),
        reply_markup=kb
    )
    
    uid = row["user_id"]
    protected_id_raw = await get_meta(f"review_msg:{uid}")
    if protected_id_raw:
        try:
            await callback.bot.delete_message(uid, int(protected_id_raw))
        except Exception:
            pass
    await set_meta(f"review_msg:{uid}", "")
    
    # ‚è±Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    asyncio.create_task(
        _expire_payment_after_admin(
            bot=callback.bot,
            chat_id=row["user_id"],
            message_id=sent.message_id,
            row_id=row_id,
            timeout_sec=10  # 5 –º–∏–Ω—É—Ç
        )
    )
    
    await callback.message.edit_text(f"‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ –±–∏–ª–µ—Ç—É #{row_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")



# =========================
# –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã (—Å –ø–∞—Ä–æ–ª–µ–º)
# =========================
class ClearDBStates(StatesGroup):
    waiting_for_password = State()

@router.message(lambda msg: msg.text == "/clear_db")
async def start_clear_db(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    await state.set_state(ClearDBStates.waiting_for_password)

@router.message(ClearDBStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    PASSWORD = "12345"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
    if message.text == PASSWORD:
        await clear_database()
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await state.clear()

# =========================
# FSM –¥–ª—è —Å–º–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
# =========================

class ChangeEventStates(StatesGroup):
    waiting_for_password = State()
    waiting_for_event_name = State()
    waiting_for_1p1_limit = State()   # <‚Äî –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_for_price_1p1 = State()
    waiting_for_price_single = State()
    waiting_for_price_promocode = State()
    waiting_for_promocode_list = State()
    
def _normalize_event_name(raw: str) -> str:
    # –ü—Ä–∏–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫—Ä–∞—è–º
    return " ".join((raw or "").strip().split())

def _change_event_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="change_event")],
        [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (–Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)", callback_data="event_off")],
    ])

@router.message(lambda msg: msg.text == "/change_event")
async def change_event_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {config.EVENT_CODE}",
        reply_markup=_change_event_menu_kb()
    )


@router.callback_query(F.data == "change_event")
async def change_event_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.update_data(_mode="change")  # —Ä–µ–∂–∏–º: —Å–º–µ–Ω–∞ –Ω–∞ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.set_state(ChangeEventStates.waiting_for_password)
    await callback.message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–º–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

@router.callback_query(F.data == "event_off")
async def event_off_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.update_data(_mode="off")  # —Ä–µ–∂–∏–º: –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (EVENT_CODE="none")
    await state.set_state(ChangeEventStates.waiting_for_password)
    await callback.message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ (–Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è):")


@router.message(ChangeEventStates.waiting_for_password)
async def change_event_check_password(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await state.clear()
        return
    if (message.text or "").strip() != ADMIN_EVENT_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return

    data = await state.get_data()
    mode = data.get("_mode", "change")

    # –†–µ–∂–∏–º: –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º EVENT_CODE = "none"
    if mode == "off":
        config.EVENT_CODE = "none"
        await state.clear()
        await message.answer(
            "üõë –ü—Ä–æ–¥–∞–∂–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n"
            "–¢–µ–∫—É—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: none\n\n"
            "–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        )
        return

    # –†–µ–∂–∏–º: —Å–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.set_state(ChangeEventStates.waiting_for_event_name)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è* (–≤–∏–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º).", parse_mode="Markdown")


@router.message(ChangeEventStates.waiting_for_event_name)
async def change_event_set_name(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await state.clear()
        return

    title = _normalize_event_name(message.text)
    if not title:
        await message.answer("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /admin –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    old = (config.EVENT_CODE or "").strip().lower()
    new = (title or "").strip()

    # –ú–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ "–Ω–∞ –ª–µ—Ç—É"
    config.EVENT_CODE = new


    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤–æ FSM, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ—Ç–æ–º –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
    await state.update_data(
        _broadcast_needed=(old == "none" and new.strip().lower() != "none"),
        _new_event_code=new
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ª–∏–º–∏—Ç–∞ 1+1
    await state.set_state(ChangeEventStates.waiting_for_1p1_limit)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî —Å–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ *1+1* –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?\n"
        "_0 ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å 1+1; –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å._",
        parse_mode="Markdown",
    )

@router.message(ChangeEventStates.waiting_for_1p1_limit)
async def change_event_set_limit(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await state.clear()
        return

    raw = (message.text or "").strip()
    try:
        qty = int(raw)
        if qty < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0, 3, 10).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await set_one_plus_one_limit(config.EVENT_CODE, qty)
    used = await count_one_plus_one_taken(config.EVENT_CODE)
    left = max(qty - used, 0)

    # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–∏–¥–±–µ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–Ω–∞–º
    await message.answer(
        "‚úÖ –õ–∏–º–∏—Ç 1+1 —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
        f"–õ–∏–º–∏—Ç: {qty}"
    )

    await state.update_data(_limit_qty=qty)
    await state.set_state(ChangeEventStates.waiting_for_price_1p1)
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –±–∏–ª–µ—Ç–∞ *1+1* (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", parse_mode="Markdown")

@router.message(ChangeEventStates.waiting_for_price_1p1)
async def change_event_price_1p1(message: Message, state: FSMContext):
    try:
        price = int((message.text or "").strip())
        if price < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚â• 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(price_1p1=price)
    await state.set_state(ChangeEventStates.waiting_for_price_single)
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –±–∏–ª–µ—Ç–∞ *single* (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", parse_mode="Markdown")


@router.message(ChangeEventStates.waiting_for_price_single)
async def change_event_price_single(message: Message, state: FSMContext):
    try:
        price = int((message.text or "").strip())
        if price < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚â• 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(price_single=price)
    await state.set_state(ChangeEventStates.waiting_for_price_promocode)
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –±–∏–ª–µ—Ç–∞ *promocode* (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", parse_mode="Markdown")


@router.message(ChangeEventStates.waiting_for_price_promocode)
async def change_event_price_promocode(message: Message, state: FSMContext):
    try:
        price = int((message.text or "").strip())
        if price < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚â• 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(price_promocode=price)
    await state.set_state(ChangeEventStates.waiting_for_promocode_list)
    await message.answer(
        "üßæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ *—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤* —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: VIP10, EARLY, TEST).\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª.",
        parse_mode="Markdown",
    )

@router.message(ChangeEventStates.waiting_for_promocode_list)
async def change_event_promocodes(message: Message, state: FSMContext):
    data = await state.get_data()
    new_event = data.get("_new_event_code", config.EVENT_CODE)

    raw = (message.text or "").strip()
    if raw in ("-", "‚Äî", "–Ω–µ—Ç", "–ù–µ—Ç", "no", "No", ""):
        codes = []
    else:
        codes = [c.strip().upper() for c in raw.split(",") if c.strip()]

    # –°–æ–±–µ—Ä—ë–º —Ü–µ–Ω—ã
    prices = {
        "1+1": int(data.get("price_1p1", 0)),
        "single": int(data.get("price_single", 0)),
        "promocode": int(data.get("price_promocode", 0)),
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_meta (per-event)
    # –∫–ª—é—á–∏: prices:<EVENT_CODE> –∏ promocodes:<EVENT_CODE>
    try:
        await set_meta(f"prices:{new_event}", json.dumps(prices, ensure_ascii=False))
        await set_meta(f"promocodes:{new_event}", json.dumps(codes, ensure_ascii=False))
    except Exception:
        # –Ω–µ –ø–∞–¥–∞–µ–º –≤ —Å–ª—É—á–∞–µ –º–µ–ª–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –ë–î
        pass

    limit_qty = int(data.get("_limit_qty", 0))
    used = await count_one_plus_one_taken(new_event)
    left = max(limit_qty - used, 0)

    # –ø–æ–¥—á–∏—Å—Ç–∏–º FSM
    broadcast_needed = bool(data.get("_broadcast_needed"))
    await state.clear()

    # –ò—Ç–æ–≥
    pretty_codes = (", ".join(codes) if codes else "‚Äî")
    await message.answer(
        "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
        f"–¢–µ–∫—É—â–µ–µ: {new_event}\n\n"
        f"–õ–∏–º–∏—Ç 1+1: {limit_qty}\n\n"
        f"–¶–µ–Ω—ã:\n"
        f"‚Ä¢ 1+1: {prices['1+1']}\n"
        f"‚Ä¢ single: {prices['single']}\n"
        f"‚Ä¢ promocode: {prices['promocode']}\n\n"
        f"–ü—Ä–æ–º–æ–∫–æ–¥—ã: {pretty_codes}"
    )

    # –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ none ‚Üí —Å—Ç–∞–ª–æ –Ω–µ none ‚Äî —à–ª—ë–º –∞–Ω–æ–Ω—Å (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    if broadcast_needed:
        await message.answer("üì£ –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞, –∑–∞—Ç–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π‚Ä¶")
        asyncio.create_task(_broadcast_last_post_then_notice(message.bot, new_event))

# =========================
# –°—á—ë—Ç—á–∏–∫ –∂–µ–ª–∞—é—â–∏—Ö 1+1
# =========================

@router.message(lambda msg: msg.text == "/wishers")
async def list_1plus1_wishers(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    rows = await get_unique_one_plus_one_attempters_for_event(config.EVENT_CODE)
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—ã—Ç–∞–ª—Å—è –∫—É–ø–∏—Ç—å 1+1 –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞.")
        return

    lines = ["üìù –ö—Ç–æ —Ö–æ—Ç–µ–ª 1+1, –Ω–æ –Ω–µ —É—Å–ø–µ–ª (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏):\n"]
    for r in rows:
        uid = r["user_id"]
        uname = r["username"] or f"id:{uid}"
        when = r["last_try"].strftime("%Y-%m-%d %H:%M")
        lines.append(f"‚Ä¢ @{uname} (id:{uid}) ‚Äî {when}")

    text = "\n".join(lines)
    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–∞–π–ª–æ–º
    if len(text) > 4000:
        with open("wishers_1plus1.txt", "w", encoding="utf-8") as f:
            f.write(text)
        await message.answer_document(FSInputFile("wishers_1plus1.txt"), caption="üìù –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞—é—â–∏—Ö 1+1")
    else:
        await message.answer(text)


# =========================
# –õ–æ–∫–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä —Ç–∞–π–º–µ—Ä–∞
# =========================

async def _expire_payment_after_admin(bot, chat_id: int, message_id: int, row_id: int, timeout_sec: int = 300):
    await asyncio.sleep(timeout_sec)

    # —É–∑–Ω–∞–µ–º —Ç–∏–ø –±–∏–ª–µ—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏–µ (–≤–∞–∂–Ω–æ –¥–ª—è 1+1)
    row = await get_row(row_id)
    ticket_type = (row["ticket_type"] or "").strip().lower() if row else ""
    event_code = row["event_code"] if row else None

    from database import get_paid_status_by_id
    status = await get_paid_status_by_id(row_id)

    if status in ("–Ω–µ –æ–ø–ª–∞—Ç–∏–ª", "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"):
                # –µ—Å–ª–∏ –±—ã–ª–æ ¬´–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ¬ª, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ ¬´–Ω–µ –æ–ø–ª–∞—Ç–∏–ª¬ª
        if status == "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ":
            try:
                await set_paid_status_by_id(row_id, "–Ω–µ –æ–ø–ª–∞—Ç–∏–ª")
            except Exception:
                pass
        try:
            await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        except Exception:
            pass

        kb = await _purchase_menu_kb()
        
        await bot.send_message(
            chat_id,
            "‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=kb
        )
        
        # –µ—Å–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è —Å–ª–æ—Ç 1+1 ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –∂–µ–ª–∞—é—â–∏—Ö
        if ticket_type == "1+1" and event_code:
            await _notify_wishers_1p1_available(bot, event_code)


# =========================
# –•–µ–ª–ø–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:
# =========================

async def _broadcast_new_event(bot, event_title: str):
    subs = await get_all_subscribers()
    if not subs:
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")],
        [InlineKeyboardButton(text="üì∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram", url=INSTAGRAM_LINK)],
        [InlineKeyboardButton(text="üéü –û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç", callback_data="buy_ticket_menu")]        
    ])
    text = (
        f"üî• –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_title}\n\n"
        "–ë–∏–ª–µ—Ç—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –Ω–µ –∑–∞–±—É–¥—å –∫—É–ø–∏—Ç—åüëá"
    )
    # Telegram: –Ω–µ —á–∞—â–µ ~30 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫. –ü–æ–π–¥—ë–º –º—è–≥–∫–æ ‚Äî 20/—Å–µ–∫.
    for uid, _uname in subs:
        try:
            await bot.send_message(uid, text, reply_markup=kb)
            await asyncio.sleep(0.05)
        except Exception:
            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä.
            await asyncio.sleep(0.05)

async def _broadcast_last_post_then_notice(bot, event_title: str):
    post_id = await get_meta(LAST_POST_KEY)  # –º–æ–∂–µ—Ç –±—ã—Ç—å None, —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    subs = await get_all_subscribers()
    if not subs:
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb_notice_subscribed = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéü –û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç", callback_data="buy_ticket_menu")]
    ])
    kb_notice_unsubscribed = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")],
        [InlineKeyboardButton(text="üì∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram", url=INSTAGRAM_LINK)],
        [InlineKeyboardButton(text="üéü –û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç", callback_data="buy_ticket_menu")]
    ])

    for uid, _uname in subs:
        # 1) –∫–æ–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)
        if post_id:
            try:
                await bot.copy_message(chat_id=uid, from_chat_id=CHANNEL_ID, message_id=int(post_id))
            except Exception:
                pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö, –∫ –∫–æ–º—É –Ω–µ –¥–æ—Å—Ç–∞–≤–∏–ª–∏

        # 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        subscribed = False
        try:
            member = await bot.get_chat_member(CHANNEL_ID, uid)
            status = getattr(member, "status", None)
            subscribed = status in ("member", "administrator", "creator")
        except Exception:
            # –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            subscribed = False

        kb = kb_notice_subscribed if subscribed else kb_notice_unsubscribed

        # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await bot.send_message(
                uid,
                f"üî• –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_title}\n\n–ë–∏–ª–µ—Ç—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –∂–º–∏ –Ω–∏–∂–µ üëá",
                reply_markup=kb
            )
        except Exception:
            pass

        # –æ–≥—Ä–∞–Ω–∏—á–∏–º —Å–∫–æ—Ä–æ—Å—Ç—å (‚âà20 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫)
        await asyncio.sleep(0.05)


# =========================
# –†–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞:
# =========================
class BroadcastLastStates(StatesGroup):
    waiting_for_password = State()

@router.message(BroadcastLastStates.waiting_for_password)
async def broadcast_last_check_password(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await state.clear()
        return

    pwd_ok = (message.text or "").strip() == (ADMIN_BROADCAST_PASSWORD or ADMIN_EVENT_PASSWORD or "")
    if not pwd_ok:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return

    await state.clear()
    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É‚Ä¶")
    await _broadcast_last_post(message.bot, message)
    
LAST_POST_KEY = "last_channel_post_id"

@router.channel_post()
async def remember_last_channel_post(msg: Message):
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º @username –∏ numeric id
    is_same_channel = False
    try:
        is_same_channel = (
            str(msg.chat.id) == str(CHANNEL_ID)
            or (msg.chat.username and ("@" + msg.chat.username).lower() == str(CHANNEL_ID).lower())
        )
    except Exception:
        pass
    if not is_same_channel:
        return

    await set_meta(LAST_POST_KEY, msg.message_id)

async def _broadcast_last_post(bot, reply_target):
    post_id = await get_meta(LAST_POST_KEY)
    if not post_id:
        await reply_target.answer(
            "‚ö†Ô∏è –Ø –µ—â—ë –Ω–µ –≤–∏–¥–µ–ª –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞. "
            "–û–ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞), –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    subs = await get_all_subscribers()
    if not subs:
        await reply_target.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    sent, skipped = 0, 0
    for uid, _uname in subs:
        try:
            await bot.copy_message(
                chat_id=uid,
                from_chat_id=CHANNEL_ID,    # –º–æ–∂–µ—Ç –±—ã—Ç—å @username
                message_id=int(post_id)
            )
            sent += 1
        except Exception:
            skipped += 1

    await reply_target.answer(f"üì£ –ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}.")

@router.message(lambda m: m.text == "/broadcast_last")
async def broadcast_last_cmd(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await state.set_state(BroadcastLastStates.waiting_for_password)
    await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞:")

@router.callback_query(F.data == "broadcast_last")
async def broadcast_last_cb(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(BroadcastLastStates.waiting_for_password)
    await callback.message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞:")

# =========================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤:
# =========================

_SCANNER_META_KEY = "SCANNER_ADMIN_IDS"

def _scan_cancel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="scan_access_cancel")]
    ])



async def _load_scanner_ids() -> set[int]:
    raw = await get_meta(_SCANNER_META_KEY)
    if raw:
        try:
            return set(int(x) for x in json.loads(raw))
        except Exception:
            return set()
    # —Ñ–æ–ª–±—ç–∫ –Ω–∞ .env (–µ—Å–ª–∏ –º–µ—Ç–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
    try:
        return set(int(x) for x in getattr(config, "SCANNER_ADMIN_IDS", []))
    except Exception:
        return set()

async def _save_scanner_ids(ids: set[int]) -> None:
    await set_meta(_SCANNER_META_KEY, json.dumps(sorted(list(ids))))

async def _can_use_scanner(user_id: int) -> bool:
    if user_id in config.ADMIN_IDS:
        return True
    ids = await _load_scanner_ids()
    return user_id in ids

class ScanAccessStates(StatesGroup):
    waiting_for_add_id = State()
    waiting_for_remove_id = State()

def _scan_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥–º–∏–Ω–æ–≤", callback_data="scan_access_view")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="scan_access_add"),
         InlineKeyboardButton(text="‚ûñ –£–±—Ä–∞—Ç—å",   callback_data="scan_access_remove")],
        [InlineKeyboardButton(text="‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å",  callback_data="scan_access_close")],
    ])



@router.callback_query(F.data == "scan_access_menu")
async def scan_access_menu(callback: CallbackQuery):
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await callback.message.answer("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∫–∞–Ω–µ—Ä—É:", reply_markup=_scan_menu_kb())

@router.callback_query(F.data == "scan_access_view")
async def scan_access_view(callback: CallbackQuery):
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    ids = await _load_scanner_ids()
    if not ids:
        text = "–°–∫–∞–Ω–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç."
    else:
        lines = ["üë• –°–∫–∞–Ω–µ—Ä-–∞–¥–º–∏–Ω—ã:"]
        for uid in sorted(ids):
            lines.append(f"‚Ä¢ {uid}")
        text = "\n".join(lines)
    await callback.message.answer(text, reply_markup=_scan_menu_kb())

@router.callback_query(F.data == "scan_access_cancel")
async def scan_access_cancel(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.answer("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∫–∞–Ω–µ—Ä—É:", reply_markup=_scan_menu_kb())


@router.callback_query(F.data == "scan_access_add")
async def scan_access_add(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(ScanAccessStates.waiting_for_add_id)
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π user_id, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∫–∞–Ω–µ—Ä—É.",
        reply_markup=_scan_cancel_kb()
    )


@router.message(ScanAccessStates.waiting_for_add_id)
async def scan_access_add_id(message: Message, state: FSMContext):
    if message.from_user.id not in config.ADMIN_IDS:
        await state.clear()
        return
    try:
        uid = int((message.text or "").strip())
    except ValueError:
        await message.answer("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
                             reply_markup=_scan_cancel_kb())
        return

    ids = await _load_scanner_ids()
    if uid in config.ADMIN_IDS or uid in ids:
        await message.answer("‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∫–∞–Ω–µ—Ä—É.")
    else:
        ids.add(uid)
        await _save_scanner_ids(ids)
        await message.answer(f"‚úÖ –í—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–∫–∞–Ω–µ—Ä—É: {uid}")

    await state.clear()
    await message.answer("–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=_scan_menu_kb())

@router.callback_query(F.data == "scan_access_remove")
async def scan_access_remove(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(ScanAccessStates.waiting_for_remove_id)
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π user_id, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø.",
        reply_markup=_scan_cancel_kb()
    )


@router.message(ScanAccessStates.waiting_for_remove_id)
async def scan_access_remove_id(message: Message, state: FSMContext):
    if message.from_user.id not in config.ADMIN_IDS:
        await state.clear()
        return
    try:
        uid = int((message.text or "").strip())
    except ValueError:
        await message.answer("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
                             reply_markup=_scan_cancel_kb())
        return

    if uid in config.ADMIN_IDS:
        await message.answer("üö´ –ù–µ–ª—å–∑—è –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ (ADMIN_IDS).")
    else:
        ids = await _load_scanner_ids()
        if uid not in ids:
            await message.answer("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∞–∫ –Ω–µ—Ç –ø—Ä–∞–≤ —Å–∫–∞–Ω–µ—Ä–∞.")
        else:
            ids.remove(uid)
            await _save_scanner_ids(ids)
            await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–∫–∞–Ω–µ—Ä—É –æ—Ç–æ–∑–≤–∞–Ω: {uid}")

    await state.clear()
    await message.answer("–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=_scan_menu_kb())

@router.callback_query(F.data == "scan_access_close")
async def scan_access_close(callback: CallbackQuery):
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await callback.message.answer("–ó–∞–∫—Ä—ã—Ç–æ.")

@router.message(lambda m: m.text == "/scan_access_menu")
async def scan_access_menu_cmd(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return
    await message.answer("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∫–∞–Ω–µ—Ä—É:", reply_markup=_scan_menu_kb())



async def _purchase_menu_kb() -> InlineKeyboardMarkup:
    rows = []
    try:
        limit = await get_one_plus_one_limit(config.EVENT_CODE)
    except Exception:
        limit = None

    if limit and limit > 0:
        rows.append([InlineKeyboardButton(text="üé´ –ë–∏–ª–µ—Ç 1+1", callback_data="ticket_1plus1")])

    rows.append([InlineKeyboardButton(text="üé´ 1 –±–∏–ª–µ—Ç", callback_data="ticket_single")])
    rows.append([InlineKeyboardButton(text="üéü –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="ticket_promocode")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back:start")])

    return InlineKeyboardMarkup(inline_keyboard=rows)

async def _notify_wishers_1p1_available(bot, event_code: str):
    """
    –®–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –ø—ã—Ç–∞–ª—Å—è –≤–∑—è—Ç—å 1+1,
    –∫–æ–≥–¥–∞ —Å–ª–æ—Ç—ã –±—ã–ª–∏ –∑–∞–Ω—è—Ç—ã. –ù–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞.
    """
    remaining = await remaining_one_plus_one_for_event(event_code)
    if remaining is None or remaining <= 0:
        return

    rows = await get_unique_one_plus_one_attempters_for_event(event_code)
    if not rows:
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéü –û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç", callback_data="ticket_1plus1")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back:ticket")],
    ])

    sent = 0
    for r in rows:
        uid = int(r["user_id"])
        try:
            await bot.send_message(
                uid,
                f"‚ú® –û—Å–≤–æ–±–æ–¥–∏–ª–∏—Å—å –±–∏–ª–µ—Ç—ã 1+1 –Ω–∞ ¬´{event_code}¬ª. –£—Å–ø–µ–π –∑–∞–±—Ä–∞—Ç—å üëá",
                reply_markup=kb
            )
            sent += 1
        except Exception:
            pass

        if sent >= remaining:
            break

        await asyncio.sleep(0.05)  # –º—è–≥–∫–∏–π rate-limit



# ===============================================
# ==== helpers: —Ü–µ–Ω—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —Å–æ–±—ã—Ç–∏—è ====
# ===============================================

def _norm_ticket_key(raw: str) -> str:
    s = (raw or "").strip().lower()
    # –¥–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    s = s.replace(" ", "")
    if s in ("1+1", "1plus1", "oneplusone"):
        return "1+1"
    if s in ("single", "1", "–æ–¥–∏–Ω", "solo"):
        return "single"
    if s in ("promocode", "promo", "promocod", "–ø—Ä–æ–º–æ–∫–æ–¥"):
        return "promocode"
    return s  # –Ω–∞ —Å–ª—É—á–∞–π –±—É–¥—É—â–∏—Ö —Ç–∏–ø–æ–≤

def _parse_prices(text: str) -> dict[str, int]:
    """
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø–æ —Å—Ç—Ä–æ–∫–∞–º; –ø–æ—Ä—è–¥–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã–π):
      1+1: 1500
      single: 1000
      promocode: 800
    –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "1+1:1500, single:1000, promocode:800"
    """
    if not text:
        return {}
    prices = {}
    parts = []
    # –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –∏ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    for line in text.replace(",", "\n").splitlines():
        line = line.strip()
        if not line:
            continue
        parts.append(line)
    for p in parts:
        if ":" not in p:
            raise ValueError(f"–ù–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è: ¬´{p}¬ª")
        k, v = p.split(":", 1)
        k = _norm_ticket_key(k)
        v = v.strip().replace(" ", "")
        if not v.isdigit():
            raise ValueError(f"–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º: ¬´{p}¬ª")
        prices[k] = int(v)
    # sanity-check ‚Äî –≤–∞–∂–Ω—ã–µ –∫–ª—é—á–∏ –º–æ–∂–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ–º –∂—ë—Å—Ç–∫–æ
    return prices

def _parse_promocodes(text: str) -> list[str]:
    """
    "VIP, SUMMER2025, test_1" -> ["VIP", "SUMMER2025", "test_1"]
    –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.
    """
    if not (text or "").strip():
        return []
    arr = [c.strip() for c in text.split(",")]
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    out = []
    for c in arr:
        if not c:
            continue
        if c not in seen:
            seen.add(c)
            out.append(c)
    return out

async def _save_event_prices(event_code: str, prices: dict[str, int]):
    await set_meta(f"prices:{event_code}", json.dumps(prices, ensure_ascii=False))

async def _load_event_prices(event_code: str) -> dict[str, int] | None:
    raw = await get_meta(f"prices:{event_code}")
    if not raw:
        return None
    try:
        return json.loads(raw)
    except Exception:
        return None

async def _save_event_promocodes(event_code: str, codes: list[str]):
    await set_meta(f"promocodes:{event_code}", json.dumps(codes, ensure_ascii=False))

async def _load_event_promocodes(event_code: str) -> list[str] | None:
    raw = await get_meta(f"promocodes:{event_code}")
    if not raw:
        return None
    try:
        return json.loads(raw)
    except Exception:
        return None
