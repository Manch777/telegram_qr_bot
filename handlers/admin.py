from aiogram import Router, F
import aiosqlite
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo,CallbackQuery 
from aiogram.types import WebAppData
from qr_generator import generate_qr
from database import (
    add_user, update_status, get_status,
    get_paid_status, set_paid_status,
    count_registered, count_activated,
    get_registered_users, get_paid_users,
    clear_database, mark_as_paid
)
from config import SCAN_WEBAPP_URL, ADMIN_IDS, CHANNEL_ID, PAYMENT_LINK
from aiogram.types import BotCommand,BotCommandScopeChat, FSInputFile
from openpyxl import Workbook

router = Router()

@router.message(lambda msg: msg.text == "/admin")
async def admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.bot.set_my_commands([
        BotCommand(command="report", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="users", description="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="scanner", description="üì∑ –û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä"),
        BotCommand(command="paid_users", description="üí∞ –û–ø–ª–∞—Ç–∏–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
        BotCommand(command="clear_db", description="–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É"),
        BotCommand(command="exit_admin", description="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é"),
    ],
    scope={"type": "chat", "chat_id": message.from_user.id}
)

    await message.answer("üõ° –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(lambda msg: msg.web_app_data is not None)
async def handle_webapp_data(message: Message):
    user_id = int(message.web_app_data.data.strip())
    status = await get_status(user_id)

    if status is None:
        await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif status == "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω":
        await update_status(user_id, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        await message.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£–¥–∞—á–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
    else:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

@router.message(lambda msg: msg.text == "/report")
async def report(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    total = await count_registered()
    active = await count_activated()
    inactive = total - active
    chat_count = await message.bot.get_chat_member_count(CHANNEL_ID)

    # –ù–æ–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
    async with aiosqlite.connect("users.db") as db:
        cursor = await db.execute("SELECT COUNT(*) FROM users WHERE paid = '–æ–ø–ª–∞—Ç–∏–ª'")
        paid_count = (await cursor.fetchone())[0]
        
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {chat_count}\n"
        f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ: {total}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∏–ª–∏: {paid_count}\n"
        f"‚úÖ –ü—Ä–∏—à–ª–∏: {active}\n"
        f"‚ùå –ù–µ –ø—Ä–∏—à–ª–∏: {inactive}"
    )
    
@router.message(lambda msg: msg.text == "/users")
async def list_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users = await get_registered_users()

    if not users:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.")
        return

    text = "üìÑ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, username, paid, status in users:
        name = f"@{username}" if username else f"(id: {user_id})"
        text += f"{name} ‚Äî {status}\n"

    # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —Ñ–∞–π–ª
    if len(text) > 4000:
        with open("registered_users.txt", "w", encoding="utf-8") as f:
            f.write(text)

        from aiogram.types import FSInputFile
        file = FSInputFile("registered_users.txt")
        await message.answer_document(file, caption="üìÑ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        await message.answer(text)

@router.message(lambda msg: msg.text == "/exit_admin")
async def exit_admin_mode(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¢–û–õ–¨–ö–û –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
    await message.bot.delete_my_commands(scope=BotCommandScopeChat(chat_id=message.from_user.id))

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî –º–æ–∂–µ—à—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await message.bot.set_my_commands([
        BotCommand(command="start", description="–ü–æ–ª—É—á–∏—Ç—å QR"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å / –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"),
    ])

    await message.answer("‚Ü©Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

@router.message(lambda msg: msg.text == "/scanner")
async def scanner_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ –û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä", url=SCAN_WEBAPP_URL)]
    ])
    await message.answer("–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("approve:"))
async def approve_payment(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await callback.bot.get_chat(user_id)
    username = user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR
    await add_user(user_id, username)
    await mark_as_paid(user_id)
    await update_status(user_id, "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    path = generate_qr(user_id)
    file = FSInputFile(path)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR
    await callback.bot.send_photo(
        chat_id=user_id,
        photo=file,
        caption="üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à QR-–∫–æ–¥."
    )

    await callback.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, QR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")    


@router.callback_query(F.data.startswith("reject:"))
async def reject_payment(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await set_paid_status(user_id, "–Ω–µ –æ–ø–ª–∞—Ç–∏–ª")

    user = await callback.bot.get_chat(user_id)
    username = user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ "–Ω–µ –æ–ø–ª–∞—Ç–∏–ª"
    await set_paid_status(user_id, "–Ω–µ –æ–ø–ª–∞—Ç–∏–ª")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.bot.send_message(
        chat_id=user_id,
        text=(
            "üö´ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @Manch7"
        )
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_LINK)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{user_id}")]
    ])
    await callback.bot.send_message(
        chat_id=user_id,
        text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–¢–µ–ø–µ—Ä—å –æ–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ:",
        reply_markup=kb
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
    await callback.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")

@router.message(lambda msg: msg.text == "/paid_users")
async def list_paid_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users = await get_paid_users()

    if not users:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª.")
        return

    text = "üí∞ –û–ø–ª–∞—Ç–∏–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, username, status, paid in users:
        name = f"@{username}" if username else f"(id: {user_id})"
        text += f"{name} ‚Äî {paid}\n"

    if len(text) > 4000:
        with open("paid_users.txt", "w", encoding="utf-8") as f:
            f.write(text)
        from aiogram.types import FSInputFile
        file = FSInputFile("paid_users.txt")
        await message.answer_document(file, caption="üí∞ –°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö")
    else:
        await message.answer(text)

# –®–∞–≥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
class ClearDBStates(StatesGroup):
    waiting_for_password = State()

@router.message(lambda msg: msg.text == "/clear_db")
async def start_clear_db(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    await state.set_state(ClearDBStates.waiting_for_password)

@router.message(ClearDBStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    PASSWORD = "12345"  # ‚Üê –∑–¥–µ—Å—å –∑–∞–¥–∞–π —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å

    if message.text == PASSWORD:
        await clear_database()
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    await state.clear()
