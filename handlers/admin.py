from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    FSInputFile, BufferedInputFile, BotCommand, BotCommandScopeChat
)
from qr_generator import generate_qr
from database import (
    # —Ä–∞–±–æ—Ç–∞ –ø–æ row_id
    get_row, get_paid_status_by_id, set_paid_status_by_id,
    get_status_by_id, update_status_by_id,
    # –æ—Ç—á—ë—Ç—ã / —Å–ø–∏—Å–∫–∏
    count_registered, count_activated, count_paid,
    get_registered_users, get_paid_users,
    # –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    clear_database,
)
from config import SCAN_WEBAPP_URL, ADMIN_IDS, CHANNEL_ID, PAYMENT_LINK, ADMIN_EVENT_PASSWORD

router = Router()

# =========================
# /admin ‚Äî –ø–∞–Ω–µ–ª—å
# =========================
@router.message(lambda msg: msg.text == "/admin")
async def admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await message.bot.set_my_commands([
        BotCommand(command="report", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="users", description="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="scanner", description="üì∑ –û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä"),
        BotCommand(command="paid_users", description="üí∞ –û–ø–ª–∞—Ç–∏–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
        BotCommand(command="change_event", description="üîÅ –°–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"),
        BotCommand(command="clear_db", description="–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É"),
        BotCommand(command="exit_admin", description="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é"),
    ], scope={"type": "chat", "chat_id": message.from_user.id})

    await message.answer("üõ° –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# =========================
# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ WebApp
# –û–∂–∏–¥–∞–µ–º payload –≤–∏–¥–∞ "row_id:ticket_type"
# =========================
@router.message(lambda msg: msg.web_app_data is not None)
async def handle_webapp_data(message: Message):
    payload = (message.web_app_data.data or "").strip()
    if not payload:
        await message.answer("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫–∞–Ω–µ—Ä–∞.")
        return

    # 1) –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–∫–∞–∫ —Ä–∞–Ω—å—à–µ): –≤ payload —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ (user_id)
    if payload.isdigit():
        user_id = int(payload)
        status = await get_status(user_id)
        if status is None:
            await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif status == "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω":
            await update_status(user_id, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await message.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£–¥–∞—á–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
        else:
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        return

    # 2) –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: R:<row_id>, QR:<...>, <row_id>:—á—Ç–æ-—É–≥–æ–¥–Ω–æ
    p = payload.lstrip()
    if p.lower().startswith("qr:"):
        p = p[3:].lstrip()
    if p.lower().startswith("r:"):
        p = p[2:].lstrip()

    num_str = p.split(":", 1)[0]
    try:
        candidate = int(num_str)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR.")
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º, –∫–∞–∫ —Ä–∞–Ω—å—à–µ, —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –∫–∞–∫ user_id (–µ—Å–ª–∏ —Å–∫–∞–Ω–µ—Ä –≤—Å—ë –µ—â—ë —à–ª—ë—Ç user_id —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º)
    status = await get_status(candidate)
    if status is not None:
        if status == "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω":
            await update_status(candidate, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await message.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£–¥–∞—á–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
        else:
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        return

    # –ò–Ω–∞—á–µ —ç—Ç–æ row_id ‚Äî –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ (–æ–¥–Ω–∞ –ø–æ–∫—É–ø–∫–∞ = –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
    row = await get_row(candidate)
    if row is None:
        await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    status_by_id = await get_status_by_id(candidate)
    if status_by_id == "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω":
        await update_status_by_id(candidate, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        await message.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£–¥–∞—á–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
    else:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

# =========================
# /report ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# =========================
@router.message(lambda msg: msg.text == "/report")
async def report(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    total = await count_registered()
    active = await count_activated()
    inactive = total - active
    chat_count = await message.bot.get_chat_member_count(CHANNEL_ID)
    paid_count = await count_paid()

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {chat_count}\n"
        f"üë§ –°–æ–∑–¥–∞–Ω–æ –ø–æ–∫—É–ø–æ–∫: {total}\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {paid_count}\n"
        f"‚úÖ –ü—Ä–∏—à–ª–∏: {active}\n"
        f"‚ùå –ù–µ –ø—Ä–∏—à–ª–∏: {inactive}"
    )

# =========================
# /users ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
# =========================
@router.message(lambda msg: msg.text == "/users")
async def list_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users = await get_registered_users()
    if not users:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.")
        return

    text = "üìÑ –ó–∞–ø–∏—Å–∏ –ø–æ–∫—É–ø–æ–∫:\n\n"
    for user_id, username, paid, status in users:
        name = f"@{username}" if username else f"(id: {user_id})"
        text += f"{name} ‚Äî {status} / {paid}\n"

    if len(text) > 4000:
        with open("registered_users.txt", "w", encoding="utf-8") as f:
            f.write(text)
        file = FSInputFile("registered_users.txt")
        await message.answer_document(file, caption="üìÑ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")
    else:
        await message.answer(text)

# =========================
# /exit_admin ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞
# =========================
@router.message(lambda msg: msg.text == "/exit_admin")
async def exit_admin_mode(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    await message.bot.delete_my_commands(scope=BotCommandScopeChat(chat_id=message.from_user.id))
    await message.bot.set_my_commands([
        BotCommand(command="start", description="–ü–æ–ª—É—á–∏—Ç—å QR"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å / –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"),
    ])

    await message.answer("‚Ü©Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# =========================
# /scanner ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Å–∫–∞–Ω–µ—Ä
# =========================
@router.message(lambda msg: msg.text == "/scanner")
async def scanner_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ –û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä", url=SCAN_WEBAPP_URL)]
    ])
    await message.answer("–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=keyboard)
    
# =========================
# /change_event ‚Äî üîÅ –°–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
# =========================
@router.message(lambda msg: msg.text == "/change_event")
async def scanner_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="change_event")],
    ])
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n‚Ä¢ code: {config.EVENT_CODE}\n‚Ä¢ title: {getattr(config, 'EVENT_TITLE', config.EVENT_CODE)}",
        reply_markup=keyboard
    )
    
# =========================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ row_id
# =========================
@router.callback_query(F.data.startswith("approve_row:"))
async def approve_payment(callback: CallbackQuery):
    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶", show_alert=False)
    row_id = int(callback.data.split(":")[1])

    row = await get_row(row_id)
    if not row:
        await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # —Å—Ç–∞–≤–∏–º –æ–ø–ª–∞—Ç—É –∏ –≥–µ–Ω–µ—Ä–∏–º QR
    await set_paid_status_by_id(row_id, "–æ–ø–ª–∞—Ç–∏–ª")

    ticket_type = row["ticket_type"]
    event_code = row["event_code"] or "-"   # <-- –≤–º–µ—Å—Ç–æ row.get(...)

    png_bytes = await generate_qr(row_id)
    photo = BufferedInputFile(png_bytes, filename=f"ticket_{row_id}.png")

    await callback.bot.send_photo(
        chat_id=row["user_id"],
        photo=photo,
        caption=(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"–í–∞—à –±–∏–ª–µ—Ç #{row_id}\n"
            f"–¢–∏–ø: {ticket_type}\n"
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_code}"
        )
    )

    await callback.message.edit_text(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. QR –ø–æ –±–∏–ª–µ—Ç—É #{row_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# =========================
# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ row_id
# =========================
@router.callback_query(F.data.startswith("reject_row:"))
async def reject_payment(callback: CallbackQuery):
    row_id = int(callback.data.split(":")[1])
    row = await get_row(row_id)
    if not row:
        await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await set_paid_status_by_id(row_id, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_LINK)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_row:{row_id}")]
    ])
    await callback.bot.send_message(
        chat_id=row["user_id"],
        text=(
            "üö´ –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç—ë–∂ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            "–ï—Å–ª–∏ –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏–ª–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª."
        ),
        reply_markup=kb
    )

    await callback.message.edit_text(f"‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ –±–∏–ª–µ—Ç—É #{row_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")

# =========================
# /paid_users ‚Äî —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
# =========================
@router.message(lambda msg: msg.text == "/paid_users")
async def list_paid_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users = await get_paid_users()
    if not users:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª.")
        return

    text = "üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:\n\n"
    for user_id, username, status, paid in users:
        name = f"@{username}" if username else f"(id: {user_id})"
        text += f"{name} ‚Äî {paid} / {status}\n"

    if len(text) > 4000:
        with open("paid_users.txt", "w", encoding="utf-8") as f:
            f.write(text)
        file = FSInputFile("paid_users.txt")
        await message.answer_document(file, caption="üí∞ –°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö")
    else:
        await message.answer(text)

# =========================
# –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã (—Å –ø–∞—Ä–æ–ª–µ–º)
# =========================
class ClearDBStates(StatesGroup):
    waiting_for_password = State()

@router.message(lambda msg: msg.text == "/clear_db")
async def start_clear_db(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    await state.set_state(ClearDBStates.waiting_for_password)

@router.message(ClearDBStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    PASSWORD = "12345"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
    if message.text == PASSWORD:
        await clear_database()
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await state.clear()

# =========================
# FSM –¥–ª—è —Å–º–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
# =========================

class ChangeEventStates(StatesGroup):
    waiting_for_password = State()
    waiting_for_title = State()

def _slugify_title_as_code(title: str) -> str:
    # –î–µ–ª–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π code –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (ASCII-only)
    code = re.sub(r"[^A-Za-z0-9_-]+", "-", title.strip())
    code = re.sub(r"-{2,}", "-", code).strip("-")
    if not code:
        from datetime import date
        code = f"event-{date.today().isoformat()}"
    return code.lower()

@router.callback_query(F.data == "change_event")
async def change_event_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(ChangeEventStates.waiting_for_password)
    await callback.message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–º–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

@router.message(ChangeEventStates.waiting_for_password)
async def change_event_check_password(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await state.clear()
        return
    if (message.text or "").strip() != ADMIN_EVENT_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return
    await state.set_state(ChangeEventStates.waiting_for_title)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ).", parse_mode="Markdown")

@router.message(ChangeEventStates.waiting_for_title)
async def change_event_set_title(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await state.clear()
        return

    title = (message.text or "").strip()
    if not title:
        await message.answer("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /admin –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    code = _slugify_title_as_code(title)

    # –ú–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ "–Ω–∞ –ª–µ—Ç—É"
    config.EVENT_TITLE = title
    config.EVENT_CODE = code

    await state.clear()
    await message.answer(
        "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
        f"‚Ä¢ code: `{code}`\n"
        f"‚Ä¢ title: {title}\n\n"
        "–ê–∫—Ü–∏—è *1+1* —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ª–∏–º–∏—Ç 5 –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö).",
        parse_mode="Markdown"
    )
